version: "2.0"
nlu:
- regex: project
  examples: |
    - "([^"]*)"

- intent: login
  examples: |
    - Mi mail es [galopiancola@hotmail.com]{"entity": "email"}
    - Mi email es [palmirab@gmail.com]{"entity": "email"}
    - Quiero iniciar sesión con [nicoerrea@hotmail.com]{"entity": "email"}
    - [joacosaralegui@gmail.com]{"entity": "email"}
    - [carlosperez@yahoo.com.ar]{"entity": "email"}
    - [joaquinsaralegui@hotmail.com.ar]{"entity": "email"}
    - [nicolasmaduro@hotmail.es]{"entity": "email"}
    - Tengo que iniciar sesion como [mauroandres@exa.unicen.edu.ar]{"entity": "email"}
    - Quiero trabjar como [galopiancola@yahoo.com.ar]{"entity": "email"}
    - Necesito entrar como [marcosfernandez@outlook.com]{"entity": "email"}

- intent: register_project
  examples: |
    - Quiero empezar un nuevo proyecto
    - Quiero crear un proyecto de cero
    - Creame un nuevo proyecto
    - Uno nuevo
    - Dame uno nuevo
    - Voy a empezar un nuevo proyecto
    - Quiero crear un nuevo trabajo
    - Quiero arrancar un nuevo trabajo
    - Haceme un proyecto nuevo

- intent: join_project
  examples: |
    - Quiero unirme a un proyecto
    - Quiero sumame a un proyecto
    - Sumame a un equipo
    - Quiero agregarme
    - Agremame a un proyecto
    - Me quiero sumar a uno

- intent: continue_project
  examples: |
    - Quiero continuar mi proyecto
    - Necesito seguir con mi proyecto
    - Tengo un trabajo empezado
    - [842]{"entity": "project_id"}
    - [4]{"entity": "project_id"}
    - [35]{"entity": "project_id"}
    - El id del proyecto es [924]{"entity": "project_id"}
    - El id es [1034]{"entity": "project_id"}
    - Quiero continuar mi proyecto [001]{"entity": "project_id"}
    - Quiero seguir con mi proyecto [417]{"entity": "project_id"}
    - Necesito continuar con mi proyecto [2482]{"entity": "project_id"}
    - Voy a seguir con mi proyecto [127]{"entity": "project_id"}
    - Voy a continuar mi trabajo [127]{"entity": "project_id"}

- intent: project_name
  examples: |
    - Mi proyecto es "[Pedidos Ya]{"entity": "project"}"
    - El nombre de mi proyecto es "[GranDT]{"entity": "project"}"
    - "[Uber]"{"entity": "project"}"
    - "[Proyecto 4]{"entity": "project"}"
    - "[Proyecto 4]{"entity": "project"}"
    - "[Arquitectura II]{"entity": "project"}
    - El nombre es "[Proyecto de arquitecura I]{"entity": "project"}"
    - Mi proyecto se llama "[Proyecto 1]{"entity":"project"}"
    - El proyecto se llama "[Proyecto Nuevo 15]{"entity":"project"}"
    - Se llama "[Proyecto de Joaco 123]{"entity":"project"}"
    - El nombre es "[Carlos 14 123]{"entity":"project"}"

- intent: add_requirements
  examples: |
    - Quiero agregar requerimentos al proyecto
    - Necesito agregar requerimentos
    - Voy a agregar requerimentos al trabajo
    - Elijo añadir requerimentos al proyecto
    - Quiero añadir requerimentos al trabajo
    - Voy a añadir requerimentos

- intent: list_projects
  examples: |
    - Quiero ver todos mis proyectos
    - Dame los datos de mis proyectos
    - Quiero saber cuales son mis proyectos creados
    - Listame mis proyectos actuales
    - Necesito ver mis trabajos
    - Quiero ver los datos de mis proyectos actuales
    - Mostrame mis proyectos
    - Mostrame los ids

- intent: stop_intent
  examples: |
    - Stop
    - Basta
    - Listo
    - stop
    - basta
    - listo

- intent: ask_project_description
  examples: |
    - Quiero ver la descripción de mi proyecto
    - Necesito la descripción del proyecto
    - No recuerdo la descripción del proyecto actual
    - Te pido la descripción del trabajo actual
    - Mostrame la descripción del proyecto
    - Quiero que me muestres la descripción

- intent: ask_project_pattern
  examples: |
    - Quiero ver el patrón de mi proyecto
    - Necesito saber cuál es el patrón del proyecto
    - No recuerdo el patrón de diseño del proyecto actual
    - Te pido el patrón del trabajo actual
    - Mostrame el patrón del proyecto
    - Quiero que me muestres el patrón de diseño

- intent: ask_project_attributes
  examples: |
    - Quiero ver los atributos de calidad de mi proyecto
    - Necesito saber cuáles son los atributos del proyecto
    - No recuerdo los atributos de calidad del proyecto actual
    - Te pido los atributos de calidad del trabajo actual
    - Mostrame los atributos del proyecto
    - Quiero que me muestres los atributos de calidad

- intent: availability
  examples: |
    - Es relevante que el sistema este disponible las 24 horas del día durante todo el año
    - El sistema debe estar disponible a la mayor cantidad de accesos.
    - El sistema debe fallar un porcentaje bajo de veces del tiempo que este disponible.
    - El sistema debe fallar una baja cantidad de veces del tiempo disponible en linea.
    - Los recursos del sistema deben estar disponible en cualquier momento del dia.
    - El sistema debe proporcionar un contacto de soporte todo el dia, cualquier dia de la semana.
    - El sistema debe estar inactivo un tiempo relativamente corto por año.
    - El sistema debe estar disponible dentro de 24hs posteriores a una nueva instalacion o cambio de version.
    - El hardware del sistema debe poder funcionar sin una perdida completa de servicio, excepto que falle la fuente de energia primaria y de respaldo.
    - El sistema debe seguir funcionando, excepto que se pierdan sus recursos de alimentación.
    - El sistema debe responder a los cambios de procesamiento y entrada y salida.
    - Ante una inactividad el sistema debe volver a operar con un retraso minimo.
    - Ante una caida del sistema este debe recuperarse en el menos tiempo posible.
    - El entorno de desarollo y mantenimiento debe estar disponible para una gran cantidad de desarrolladores el mayor tiempo posible laboral.
    - El sistema debe continuar operando sin interrupciones durante las actualizaciones.
    - El producto debe funcionar sin interrupciones incluso mientras se actualiza.
    - El producto funcionará en modo offline siempre que la conexión a Internet no esté disponible.

- intent: fault_tolerance
  examples: |
    - El software del sistema debe poder funcionar sin reiniciar el sistema por completo frente a una falla.
    - El producto conservará las preferencias del usuario en caso de falla.
    - El sistema restaura las preferencias de usuario cuando el sistema vuelva a estar en línea luego de un fallo.
    - El sistema seguirá funcionando si el servidor de transmisión deja de funcionar.
    - El producto debe ser robusto con tolerancia a fallos.
    - El producto tendrá tolerancia a fallas mediante el uso de técnicas de recuperación, transacciones compensatorias y enrutamiento en caso de fallas.
    - Si un subsistema falla deben existir procedimientos predefinidos para redefinir el entorno de tal manera que la operación pueda reiniciarse.
    - En caso de falla del hardware de la computadora en relación con el equipo de la estación de usuario, será posible transferir el control de una estación de usuario a otra mediante un sencillo procedimiento de reconfiguración del software.
    - Debe ser posible que se trate de forma independiente una falla de software del sistema.
    - El sistema debe permitir al usuario ver logs de errores previos.
    - El producto y sus bases de datos deben permanecer funcionando a pesar del ingreso de datos no deseados.
    - El producto debe evitar fallos estándar.
    - El sistema deberá soportar todos los cambios provocados de cualquier falla importante.
    - Necesito un programa con tolerancia a los fallos
- intent: maintainability
  examples: |
    - Los componentes del sistema deben poder intercambiarse sin afectar el funcionamiento del programa.
    - Los módulos del sistema deben ser intercambiables.
    - El producto debe ser diseñado usando Patrones de Diseño y buenas prácticas de programación.
    - Actualizaciones de mantenimiento deben ser ofrecidas a los clientes una vez al año.
    - El programa debe mantenerse constantemente actualizado a lo largo del año.
    - El sistema debe crear registros de todos los cambios, actualizaciones, o arreglos que se le realizan.
    - El sistema debe ser fácil de actualizar.
    - Las herramientas de software y aplicaciones pre-construidas que no tienen código fuente disponible deben venir con un completo diagnóstico y soporte al cliente.
    - Los módulos externos pre-construidos tales como herramientas de software o aplicaciones deben contar con un instructivo.
    - El sistema debe estar diseñado en módulos donde los errores puedan ser detectados y corregidos fácilmente. Esto facilita instalar actualizaciones y nuevas funcionalidades si así se requiere.
    - El programa va a ser actualizado durante las horas de mantenimiento estipuladas.
    - Todos los cambios y actualizaciones al sistema deben ser actualizados en la documentación.
    - Se lanzarán nuevas versiones del sistema de forma constante
- intent: performance
  examples: |
    - Es importante que el sistema traiga resultados de búsqueda en un tiempo aceptable
    - Es prioritario que el sistema realice una rápida actualización del sitio
    - El sistema actualizará la pantalla en cortos períodos de tiempo.
    - El sistema podrá actualizar la información en la pantalla de forma inmediata.
    - El producto mantendrá siempre actualizada y consistente la interfaz
    - El producto responderá rápidamente para mantener los datos actualizados en la pantalla.
    - Se arrojarán resultados de búsqueda en un tiempo aceptable.
    - Los resultados de la búsqueda se devolverán en un tiempo aceptable, luego de que el usuario haya introducido los criterios de búsqueda.
    - El tiempo de espera para que un usuario navegue de una pantalla será inmediato
    - La respuesta del producto en su uso debe ser rápida.
    - El tiempo de respuesta de la interfaz del producto debe ser rápida.
    - La interfaz debe responder con rapidez
    - El sistema debe responder a las consultas en menos de 5 segundos
    - Cada interacción no debe tardar mas de 3 segundos
    - El tiempo de ejecución por operación debe ser constante, y no depender del volumen de datos
    - Necesito un sistema que responda rápido
    - Necesita un programa que responda rapido
- intent: scalability
  examples: |
    - El producto debe ser capaz de soportar y administrar 1000 usuarios simultáneos y remotos.
    - Se espera que el producto opere por lo menos durante 5 años para cada instalación de cliente.
    - El lenguaje del producto se debe acomodar a todos los países de mercados objetivo.
    - El sistema debe poder usarse en todos los idiomas de los países del mercado objetivo.
    - El sistema permitirá que trabajen al mismo tiempo varios usuarios en simultáneo.
    - El sitio web deberá ser capaz de soportar 100.000 clientes.
    - El producto deberá procesar un minimo de un millón de transacciones por año.
    - El repositorio de reglas de negocio debera escalar para manejar un número ilimitado de reglas adicionales.
    - El sistema de manejo de cuentas debera soportar un número ilimitado de clientes, cuentas y transacciones.
    - El sistema debe ser escalable y no debe tener ninguna característica que pudiese perjudicar el uso en cualquier estación, aunque cambie el número de casos manejado.
- intent: security
  examples: |
    - Es importante que el sistema traiga autorización de usuarios y almacenamiento seguro de contraseñas
    - Es prioritario que el sistema proteja la integridad de la información del usuario
    - Garantizar que sólo los usuarios autorizados puedan acceder al sistema.
    - El producto podrá distinguir entre usuarios autorizados y no autorizados en todos los intentos de acceso.
    - Todo usuario del sistema deberá estar autenticado y autorizado.
    - Verificación básica de la integridad de los datos para reducir la posibilidad de que se introduzcan datos incorrectos o no válidos.
    - Todas las adiciones de nuevos usuarios y las modificaciones al acceso de los usuarios se registrarán en un informe.
    - Solo se ingresarán datos válidos en el sistema.
    - No se introducirán datos inválidos en el sistema.
    - El producto estará libre de virus informáticos.
    - Se evitará ataques maliciosos.
    - Garantizar que los datos de la base de datos se correspondan con los datos introducidos por el usuario.
    - Los accesos de usuario deben ser limitados según sus roles.
    - Sólo usuarios autorizados deben tener acceso a información crítica del sistema.
    - El sistema debe proteger la información privada de acuerdo con las políticas de la organización.
    - Permite que el administrador restrinja el acceso a carpetas, documentos y metadatos a determinados usuarios del sistema
- intent: usability
  examples: |
    - Es importante que el sistema sea intuitivo y de fácil comprensión
    - Es prioritario que el sistema pueda ser usado con facilidad
    - El sistema será intuitivo y autoexplicativo.
    - El producto debe ser fácil de aprender para un agente sin conocimiento.
    - Instalación realizable por un agente no capacitado sin recurrir a instrucciones impresas por separado.
    - Fácil uso, tanto por los administradores del programa, como por miembros del personal.
    - Los usuarios se sentirán satisfechos usando el producto.
    - Las personas sin formación y sin conocimientos de inglés podrán utilizar el producto.
    - Todos los mensajes de error producidos por el sistema deben ser significativos, de modo que los usuarios que probablemente los vean puedan actuar en consecuencia.
    - Los errores arrojados por el sistema deben estar bien explicados, para que el usuario los pueda entender fácilmente.
    - La navegación debe diseñarse para ayudar a los usuarios a comprender dónde se encuentran, dónde han estado y adónde pueden ir a continuación.
    - Se deberán proporcionar funciones de usuario final y administrador que sean fáciles de usar e intuitivas en todo momento.
    - La interfaz debe mostrar datos entendibles para el usuario.
    - El producto debe ser intuitivo y fácil para el usuario
    - El usuario debe poder ubicar fácilmente instrucciones para el manejo del producto.
    - El sistema debe poseer interfaces gráficas bien formadas.
    - El tiempo de aprendizaje del sistema por un usuario deberá ser menor a 4 horas.
    - El sistema debe contar con manuales de usuario estructurados adecuadamente.
    - El sistema tiene que ser facil de aprender
    - Necesito que tenga manuales de usuario y una interfaz user-friendly
    - El usuario debe poder aprender a usar el sistema en menos de 4 horas
- intent: portability
  examples: |
    - Debe ser altamente configurable para uso con varios sistemas de bases de datos para los usuarios finales.
    - El sistema debe poder utilizarse en conjunto con más de un sistema de bases de datos
    - Debe operar en cualquier plataforma.
    - El sistema se debe poder adaptar a cualquier tecnología nueva sin hacer cambios en su arquitectura.
    - El producto debe funcionar en cualquier navegador web.
    - El sistema tiene que ser compatible con cualquier navegador web.
    - El sistema debe ser portable, fácil de cambiar de plataforma, con pocas dependencias
    - El sistema debe funcionar en todo tipo de dispositivo
    - El sistema debe funcionar en celular, tablet y escritorio
    - El diseño del sistema debe ser responsive y adaptable según el tamaño del dispositivo
    - El sistema debe funcionar en más de una plataforma móvil (Android, iOS)
    - El producto estará disponible en los sistemas operativos móviles tales como iOS y Android
    - El producto debe correr en más de un sistema operativo (Windows, Linux, macOS)
- intent: interoperability
  examples: |
    - El sistema debe poder comunicarse fácilmente con otros servicios
    - El producto debe tener la capacidad de interpretar correctamente los datos que se intercambian
    - El sistema debe poder intercambiar información de forma libre y fácil
    - La interoperabilidad del sistema debe identificar con quién, con qué y bajo qué circunstancias, -or lo tanto, la necesidad de incluir el contexto.
#  - intent: get_recomendation
#   examples: |
#     - Que me sugerís?
#     - Listo! Que arquitectura me sugerís?
#     - Qué me recomendas para esos requerimientos?
#     - Cuál arquitectura te parece la mas adecuada?
#     - Termine. Que arquitectura me sugeris?
#     - Mostrame la arquitectura
#     - Recomendame la arquitectura
- intent: greeting
  examples: |
    - Buenas
    - Hola!
    - Buenos días
    - Buen día
    - Hola, que tal?
    - Hola, que haces bot
- intent: architecture_from_requirements
  examples: |
    - Quiero diseñar una arquitectura a partir de requerimientos no funcionales
    - Me gustaria definir una arquitectura a partir de requerimientos no funcionales
    - Quiero ideas de arquitecturas basadas en requerimientos
    - Quiero que me ayudes a generar una arquitectura!
    - Quiero definir una arquitectura
    - Necesito ayuda para definir una arquitectura